#!/bin/bash
/bin/echo "WARNING: This installer isn't complete! Do NOT use for actual system installers for now"
/bin/echo "TCreeper's Unofficial ArchInstaller 0.1"

cd /usr/share/kbd/keymaps/i386 && ls --color=auto */*.map.gz
/bin/echo ""
/bin/echo -n "Write the name of the keyboard layout you want to use, then press [ENTER]: "
read keymap
/bin/echo "Chosen keymap: " $keymap && cd 
/usr/bin/loadkeys $keymap || { /bin/echo "ERROR: Wrong keyboard layout"; exit 1; }
ls /sys/firmware/efi/efivars &>/dev/null || { /bin/echo "ERROR: System is booted in BIOS or CSM mode. \
This tool only works in UEFI, if your system is UEFI capable, try disabling \"Legacy Support\" or \"Compatibility Support Module (CSM)\""; exit 1; }

/bin/echo "Boot mode: UEFI"
/bin/echo "Synchronizing system clock" && timedatectl set-ntp true
/bin/ping 1.1.1.1 -c1 || { /bin/echo "ERROR: Network not available"; exit 1; }
/bin/echo "Network: Available"
/sbin/fdisk -l 
/bin/echo "!!This installer cannot dualboot!! !!The WHOLE drive would be used!! (wait 5 seconds)" && sleep 5
/bin/echo -n "Write the path of the drive you want to install on, then press [ENTER]: /dev/"
read installdrive
/bin/echo "Chosen drive: /dev/" $installdrive

sizeofdrive=$( /bin/df -h /dev/$installdrive --output=size -BG | sed -n 2p | tr -d 'G' )

if [ $sizeofdrive \< 20 ];
	then
  	 if [ $sizeofdrive \< 8 ];
   			then
   				echo "ERROR: Drive is smaller then 8G, aborting, if you want to continue remove this line"; exit 1
   	fi
		else
			echo "WARNING: Drive is smaller then 20G, A bigger drive is recommended, installing anyway.";
fi;

if [ 80 \< $sizeofdrive ]; then
		/bin/echo -n "Should /home be seperate? Type y or n (Nothing else) [Y/n] "
		read homeseperate
	
		if [ $homeseperate != n ];  then
				homeseperate=yes
			else homeseperate=no
		fi
	else homeseperate=no
fi

if [ $homeseperate = yes ]; then
   echo "/home: Seperate from /"
else
   echo "/home: Not seperate"
fi

/bin/echo "This is the last warning!  The installer will start installing on /dev/"$installdrive" in 10 seconds"
/bin/sleep 10
/bin/echo ""

/usr/sbin/parted /dev/$installdrive mklabel gpt 
/usr/sbin/parted -a optimal /dev/$installdrive mkpart primary 0% 550MiB 

if [ $homeseperate = yes ]; then
	/usr/sbin/parted -a optimal /dev/$installdrive mkpart primary 550MiB 32GiB
	/usr/sbin/parted -a optimal /dev/$installdrive mkpart primary 32GiB 100%
	/bin/echo -n "What filesystem do you want / to be? [ext4/ext3/ext2/Btrfs/XFS/JFS/ReiserFS] "
	read rootfstype
	rootfstype=${rootfstype,,}
	if ! { [ "$rootfstype" = ext4 ] || [ "$rootfstype" = ext3  ] || [ "$rootfstype" = ext2 ] || [ "$rootfstype" = btrfs ] || [ "$rootfstype" = jfs ] || [ "$rootfstype" = xfs ] || [ "$rootfstype" = reiserfs ]; }; then
		/bin/echo "Wrong filesystem type"; exit 1	
	fi
	/bin/echo -n "What filesystem do you want /home to be? [ext4/ext3/ext2/Btrfs/XFS/JFS/ReiserFS]"
	read homefstype
	homefstype=${homefstype,,}
	if ! { [ "$homefstype" = ext4 ] || [ "$homefstype" = ext3  ] || [ "$homefstype" = ext2 ] || [ "$homefstype" = btrfs ] || [ "$homefstype" = jfs ] || [ "$homefstype" = xfs ] || [ "$homefstype" = reiserfs ]; }; then
		/bin/echo "Wrong filesystem type"; exit 1	
	fi
	/bin/echo "/home Filesytem:" $homefstype
	rootfs="/dev/$installdrive"2
	homefs="/dev/$installdrive"3
fi

if [ $homeseperate = no ]; then
	/usr/sbin/parted -a optimal /dev/$installdrive mkpart primary 550MiB 100%
	/bin/echo -n "What filesystem do you want / to be? [ext4/ext3/ext2/Btrfs/XFS/JFS/ReiserFS] "
	read rootfstype
	rootfstype=${rootfstype,,}
	rootfs="/dev/$installdrive"2
fi 



/bin/echo "Root Filesystem:" $rootfstype
echo "Creating a FAT32 filesystem fro the ESP.."
filesystemtools="$filesystemtools dosfstools"
mkfs.fat -F32 "$installdrive"1

if [ $rootfstype = ext4 ]; then
	echo "Creating a ext4 filesystem at" $rootfs
	mkfs.ext4 $rootfs 
fi

if [ $rootfstype = ext3 ]; then
	echo "Creating a ext3 filesystem at" $rootfs
	mkfs.ext3 $rootfs
fi

if [ $rootfstype = ext2 ]; then
	echo "Creating a ext2 filesystem at" $rootfs
	mkfs.ext2 $rootfs 
fi

if [ $rootfstype = btrfs ]; then
	echo "Creating a BTRFS filesystem at" $rootfs
	filesystemtools="$filesystemtools btrfs-progs"
	mkfs.btrfs $rootfs 
fi

if [ $rootfstype = xfs ]; then
	mkfs.xfs $rootfs 
fi

if [ $rootfstype = jfs ]; then
	mkfs.jfs $rootfs 
fi
/bin/echo "Created Root filesystem."

if [ $homefstype = ext4 ]; then
	echo "Creating a ext4 filesystem at" $rootfs
	mkfs.ext4 $homefs
fi

if [ $homefstype = ext3 ]; then
	echo "Creating a ext3 filesystem at" $rootfs
	mkfs.ext3 $homefs
fi

if [ $homefstype = ext2 ]; then
	echo "Creating a ext2 filesystem at" $rootfs
	mkfs.ext2 $homefs 
fi

if [ $homefstype = btrfs ]; then
	echo "Creating a Btrfs filesystem at" $rootfs
	filesystemtools="$filesystemtools btrfs-progs"
	mkfs.btrfs $homefs 
fi

if [ $homefstype = xfs ]; then
	echo "Creating a XFS filesystem at" $rootfs
	mkfs.xfs $homefs 
fi

if [ $homefstype = jfs ]; then
	echo "Creating a JFS filesystem at" $rootfs
	mkfs.jfs $homefs
fi
if [ $homeseperate = yes ]; then
	/bin/echo "Created home filesystem"
fi
