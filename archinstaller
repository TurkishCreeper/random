#!/bin/bash
# TCreeper's Unofficial ArchInstaller v0.9
# What you shouldn't expect from this installer at the moment:
# Work for BIOS systems, Create LVM or RAID partitions, choose the size of the partitions,
# Dualboot, encryption and finally.. proper code and syntax
# I do not recommend you using this script on a physical computer at the moment.

msg() {
    printf "\033[1m=> $@\033[m\n"
}

msg_n() {
	printf "\033[1m=> $@\033[m"
}

msg_warn() {
    printf "\033[1m\033[33mWARNING: $@\033[m\n"
}

msg_error() {
    printf "\033[1m\033[31mERROR: $@\033[m\n"
}

msg_warn "This installer isn't stable! Do NOT use for actual system installers for now."
msg "===========================================================" && sleep 0.1
msg "~~~~~~TCreeper's Unofficial ArchInstaller version 1.0~~~~~~" && sleep 0.1
msg "===========================================================" && sleep 0.1

cd /usr/share/kbd/keymaps/i386 && ls --color=auto */*.map.gz 
msg_n "Write the name of the keyboard layout you want to use, then press (Do not include before the /' or the extension example: trq)[ENTER]: "
read keymap 
clear
msg "Chosen keymap: $keymap" && cd 
/usr/bin/loadkeys $keymap || { msg_error "Wrong keyboard layout"; exit 1; }

ls /sys/firmware/efi/efivars &>/dev/null | msg "Boot mode: UEFI" || { msg_error "System is booted in BIOS or CSM mode. \
This tool only works in UEFI, if your system is UEFI capable, try disabling \"Legacy Support\" or \"Compatibility Support Module (CSM)\""; exit 1; }

msg "Synchronizing system clock" && timedatectl set-ntp true
/bin/wget -q --spider https://archlinux.org | msg "Network: Available" || { msg_error "Network not available"; exit 1; }
/sbin/fdisk -l && 
msg "!! This installer cannot dualboot !! !! The WHOLE drive would be used !! (Wait 5 seconds)" && sleep 5
msg_n "Write the path of the **drive** you want to install on, then press [ENTER]: /dev/"
read installdrive
msg "Chosen drive: /dev/$installdrive"

sizeofdrive=$( /bin/blockdev --getsize64 "/dev/$installdrive" | numfmt --to=iec-i --sufix=B --format="%.3f" | cut -f 1  -d '.' )

if [ $sizeofdrive \< 20 ]; then
  	 if [ $sizeofdrive \< 4 ]; then
   				msg_error "Drive is smaller then 4G, aborting, if you want to continue remove this line."; exit 1
   	fi
		else msg " Drive is smaller then 20G, A bigger drive is recommended, installing anyway.";
fi;

if [ 80 \< $sizeofdrive ]; then
		msg_n "Should /home be seperate? Type y or n (Nothing else) [Y/n] "
		read homeseperate
	
		if [ $homeseperate != n ];  then
				homeseperate=yes
			else homeseperate=no
		fi
	else homeseperate=no
fi

if [ $homeseperate = yes ]; then
   		msg "/home: Seperate from root" && sleep 1
	else msg "/home: Not seperate from root" && sleep 1
fi

msg_n "Is your cpu AMD or Intel, leave blank if you do not want to install the microcode, all lowercase (ex. intel): "
read microcodeis
if [ $microcodeis = amd ]; then
	microcode="amd-ucode"
fi
if [ $microcodeis = intel ]; then
	microcode="intel-ucode"
fi
msg "Microcode: $microcode"

msg "This is the last warning!  The installer will remake the partition layout of /dev/$installdrive in 10 seconds"
/bin/sleep 10
clear
/bin/umount /mnt/boot/ &> /dev/null && msg "/mnt/boot unmounted"
/bin/umount /mnt/home/ &> /dev/null && msg "/mnt/home unmounted"
/bin/umount /mnt/ &> /dev/null && msg "/mnt unmounted"

/usr/sbin/parted /dev/$installdrive mklabel gpt &&
/usr/sbin/parted -a optimal /dev/$installdrive mkpart primary 0% 550MiB &&
/usr/sbin/parted /dev/$installdrive set 1 boot on &&
/usr/sbin/parted /dev/$installdrive set 1 esp on &&

if [ $homeseperate = yes ]; then
	/usr/sbin/parted -a optimal /dev/$installdrive mkpart primary 550MiB 32GiB &&
	/usr/sbin/parted -a optimal /dev/$installdrive mkpart primary 32GiB 100% &&
	msg_n "What filesystem do you want / to be? [ext4/ext3/ext2/Btrfs/XFS/JFS/ReiserFS]: "
	read rootfstype
	rootfstype=${rootfstype,,} &&
	if ! { [ "$rootfstype" = ext4 ] || [ "$rootfstype" = ext3  ] || [ "$rootfstype" = ext2 ] || [ "$rootfstype" = btrfs ] || [ "$rootfstype" = jfs ] || [ "$rootfstype" = xfs ] || [ "$rootfstype" = reiserfs ]; }; then
		msg_error "Wrong filesystem type"; exit 1	
	fi
	msg_n "What filesystem do you want /home to be? [ext4/ext3/ext2/Btrfs/XFS/JFS/ReiserFS]: "
	read homefstype
	homefstype=${homefstype,,} &&
	if ! { [ "$homefstype" = ext4 ] || [ "$homefstype" = ext3  ] || [ "$homefstype" = ext2 ] || [ "$homefstype" = btrfs ] || [ "$homefstype" = jfs ] || [ "$homefstype" = xfs ] || [ "$homefstype" = reiserfs ]; }; then
		msg_error "Wrong filesystem type"; exit 1	
	fi
	msg "/home Filesytem: $homefstype"
	rootfs="/dev/$installdrive"2
	homefs="/dev/$installdrive"3 
fi

if [ $homeseperate = no ]; then
	/usr/sbin/parted -a optimal /dev/$installdrive mkpart primary 550MiB 100%
	msg_n "What filesystem do you want / to be? [ext4/ext3/ext2/Btrfs/XFS/JFS/ReiserFS]: "
	read rootfstype
	rootfstype=${rootfstype,,} &&
	if ! { [ "$rootfstype" = ext4 ] || [ "$rootfstype" = ext3  ] || [ "$rootfstype" = ext2 ] || [ "$rootfstype" = btrfs ] || [ "$rootfstype" = jfs ] || [ "$rootfstype" = xfs ] || [ "$rootfstype" = reiserfs ]; }; then
		msg_error "Wrong filesystem type"; exit 1	
	fi
	rootfs="/dev/$installdrive"2
fi 


msg "Root Filesystem:" $rootfstype

msg "Creating a FAT32 filesystem for the ESP.."
filesystemtools="$filesystemtools dosfstools"
/usr/sbin/mkfs.fat -F32 /dev/"$installdrive"1 &&

if [ "$rootfstype" = btrfs ]; then
		msg "Creating a Btrfs filesystem at $rootfs"
		filesystemtools="$filesystemtools btrfs-progs"
		/sbin/mkfs -t btrfs -f $rootfs &&
		msg "Created Root filesystem."
	else
		msg "Creating a '$rootfstype' filesystem at $rootfs"
		/sbin/mkfs -t $rootfstype $rootfs &&
		msg "Created Root filesystem."
fi

if [ "$homefstype" = btrfs ]; then
		msg "Creating a Btrfs filesystem at $homefs"
		filesystemtools="$filesystemtools btrfs-progs"
		/sbin/mkfs -t btrfs -f $homefs &&
		msg "Created home filesystem"
	else
		msg "Creating a '$homefstype' filesystem at $homefs"
		/sbin/mkfs -t $homefstype $homefs &&
		msg "Created home filesystem"		
fi

if [ "$homeseperate" = yes ]; then
		/bin/mount $rootfs /mnt
		/bin/mkdir /mnt/home
		/bin/mount $homefs /mnt/home
	else
		/bin/mount $rootfs /mnt
fi

/bin/mkdir -p /mnt/boot
/bin/mount /dev/"$installdrive"1 /mnt/boot

msg "Partitioning is done!" && sleep 2 && clear
msg "If you want more packages to be installed add them now, if you don't leave it blank (base base-devel and pacman-contrib will be installed by default)"
msg_n "Seperate with spaces, to finish press [ENTER]: "
read extrapackages
msg "Installing the system.."
/bin/pacstrap /mnt base base-devel $filesystemtools pacman-contrib $extrapackages
msg "Creating fstab via genfstab"
/bin/genfstab -U /mnt >> /mnt/etc/fstab
msg "fstab:"
/bin/cat "/mnt/etc/fstab"
/bin/arch-chroot /mnt hwclock --systohc

# Set up /etc/hosts
# Yes this probably is not a good way to put things to a file
/bin/arch-chroot /mnt 'echo "127.0.0.1 localhost" >> /etc/hosts'
/bin/arch-chroot /mnt 'echo "127.0.0.1 localhost.localdomain" >> /etc/hosts'
/bin/arch-chroot /mnt 'echo "127.0.0.1 local" >> /etc/hosts'
/bin/arch-chroot /mnt 'echo "255.255.255.255 broadcasthost" >> /etc/hosts'
/bin/arch-chroot /mnt 'echo "::1 localhost" >> /etc/hosts'
/bin/arch-chroot /mnt 'echo "::1 ip6-localhost" >> /etc/hosts'
/bin/arch-chroot /mnt 'echo "::1 ip6-loopback" >> /etc/hosts'
/bin/arch-chroot /mnt 'echo "fe80::1%lo0 localhost" >> /etc/hosts'
/bin/arch-chroot /mnt 'echo "ff00::0 ip6-localnet" >> /etc/hosts'
/bin/arch-chroot /mnt 'echo "ff00::0 ip6-mcastprefix" >> /etc/hosts'
/bin/arch-chroot /mnt 'echo "ff02::1 ip6-allnodes" >> /etc/hosts'
/bin/arch-chroot /mnt 'echo "ff02::2 ip6-allrouters" >> /etc/hosts'
/bin/arch-chroot /mnt 'echo "ff02::3 ip6-allhosts" >> /etc/hosts'
/bin/arch-chroot /mnt 'echo "0.0.0.0 0.0.0.0" >> /etc/hosts'
/bin/arch-chroot /mnt 'echo "0.0.0.0 0.0.0.0" >> /etc/hosts'

# Rebuild the initramfs
/bin/arch-chroot /mnt 'mkinitcpio -p linux'

# Enable firstboot for configuration
/bin/arch-chroot /mnt 'rm /etc/{machine-id,localtime,hostname,shadow,locale.conf}'
/bin/arch-chroot /mnt "echo [Install] >> /usr/lib/systemd/system/systemd-firstboot.service"
/bin/arch-chroot /mnt "echo WantedBy=sysinit.target >> /usr/lib/systemd/system/systemd-firstboot.service"
/bin/arch-chroot /mnt 'systemctl enable systemd-firstboot.service'

# Install systemd-boot
/bin/arch-chroot /mnt 'bootctl --path=/boot install'

# Create a pacman hook to auto-update systemd-boot when a systemd update occurs
/bin/arch-chroot /mnt 'mkdir -p /etc/pacman.d/hooks/'
/bin/arch-chroot /mnt '/etc/pacman.d/hooks/100-systemd-boot.hook'
/bin/arch-chroot /mnt "echo [Trigger] >> /etc/pacman.d/hooks/100-systemd-boot.hook"
/bin/arch-chroot /mnt "echo Type = package >> /etc/pacman.d/hooks/100-systemd-boot.hook"
/bin/arch-chroot /mnt "echo Operation = Upgrade >> /etc/pacman.d/hooks/100-systemd-boot.hook"
/bin/arch-chroot /mnt "echo Target = systemd >> /etc/pacman.d/hooks/100-systemd-boot.hook"
/bin/arch-chroot /mnt "echo  >> /etc/pacman.d/hooks/100-systemd-boot.hook"
/bin/arch-chroot /mnt "echo [Action] >> /etc/pacman.d/hooks/100-systemd-boot.hook"
/bin/arch-chroot /mnt "echo Description = Upgrading systemd-boot >> /etc/pacman.d/hooks/100-systemd-boot.hook"
/bin/arch-chroot /mnt "echo When = PostTransaction >> /etc/pacman.d/hooks/100-systemd-boot.hook"
/bin/arch-chroot /mnt "echo Exec = /usr/bin/bootctl update >> /etc/pacman.d/hooks/100-systemd-boot.hook"

# Set up systemd-boots configuration files 
/bin/arch-chroot /mnt 'mkdir -p /boot/loader/entries'
/bin/arch-chroot /mnt 'touch /boot/loader/loader.conf'
/bin/arch-chroot /mnt 'echo "default  arch" >> /boot/loader/loader.conf'
/bin/arch-chroot /mnt 'echo "timeout 4" >> /boot/loader/loader.conf'

/bin/arch-chroot /mnt 'touch /boot/loader/entries/arch.conf'
/bin/arch-chroot /mnt 'mkdir -p /boot/loader/entries/'
/bin/arch-chroot /mnt "echo title	Arch Linux >> /boot/loader/entries/arch.conf"
/bin/arch-chroot /mnt "echo linux	/vmlinuz-linux >> /boot/loader/entries/arch.conf"
/bin/arch-chroot /mnt "echo initrd	/$microcode.img >> /boot/loader/entries/arch.conf"
/bin/arch-chroot /mnt "echo initrd	/initramfs-linux.img >> /boot/loader/entries/arch.conf"

msg_n "Enter extra boot options, leave blank if none. (ex. 'pci=nomsi nomodeset' ): "
read extrabootflags

/bin/arch-chroot /mnt "echo options	rw root=$rootfs $extrabootflags >> /boot/loader/entries/arch.conf"
msg "Ok i don't know how to do networking so you have to do that yourself, the next boot you will configure hostname, root password, locales and stuff with systemd-firstboot."
msg_n "Do you want to enter the chroot (y) or reboot to the new system (n)? [y/n]: "
read rebootorchroot
if [ "$rebootorchroot" = n ]; then
		systemctl reboot
	else
		exec arch-chroot /mnt
fi